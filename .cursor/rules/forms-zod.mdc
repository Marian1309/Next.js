# React Hook Form + Zod Rules & Best Practices

## üéØ Core Principles

### 1. **Type-Safe Form Development**

- Always use Zod schemas for validation and type inference
- Leverage `@hookform/resolvers` for seamless integration
- Define explicit types for form data using `z.infer<typeof schema>`
- Use TypeScript generics for reusable form components

### 2. **Performance-First Approach**

- Use React Hook Form's uncontrolled components by default
- Minimize re-renders with proper watch and subscription strategies
- Leverage form state isolation and field-level updates
- Use `useFormContext` for deeply nested components

### 3. **Accessibility & User Experience**

- Implement proper ARIA attributes and error associations
- Provide clear error messages with field-specific context
- Use semantic HTML and proper form structure
- Support keyboard navigation and screen readers

## üìã Schema Definition Patterns

### 1. **Basic Zod Schema Structure**

```typescript
// ‚úÖ Good - Comprehensive schema with validation
import { z } from 'zod';

const userSchema = z.object({
  name: z
    .string()
    .min(2, 'Name must be at least 2 characters')
    .max(50, 'Name must not exceed 50 characters'),
  email: z.string().email('Invalid email address').min(1, 'Email is required'),
  password: z
    .string()
    .min(8, 'Password must be at least 8 characters')
    .regex(
      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)/,
      'Password must contain at least one lowercase letter, one uppercase letter, and one number'
    ),
  age: z.number().min(18, 'Must be at least 18 years old').max(120, 'Invalid age'),
  terms: z
    .boolean()
    .refine((val) => val === true, 'You must accept the terms and conditions')
});

// Type inference
type UserFormData = z.infer<typeof userSchema>;
```

### 2. **Reusable Schema Patterns**

```typescript
// ‚úÖ Good - Modular schema composition
const baseUserSchema = z.object({
  email: z.string().email('Invalid email address'),
  name: z.string().min(2, 'Name must be at least 2 characters')
});

const signUpSchema = baseUserSchema
  .extend({
    password: z.string().min(8, 'Password must be at least 8 characters'),
    confirmPassword: z.string()
  })
  .refine((data) => data.password === data.confirmPassword, {
    message: "Passwords don't match",
    path: ['confirmPassword']
  });

const signInSchema = baseUserSchema.extend({
  password: z.string().min(1, 'Password is required')
});

// Conditional validation
const userProfileSchema = z
  .object({
    isCompany: z.boolean(),
    companyName: z.string().optional(),
    personalName: z.string().optional()
  })
  .refine(
    (data) => {
      if (data.isCompany && !data.companyName) {
        return false;
      }
      if (!data.isCompany && !data.personalName) {
        return false;
      }
      return true;
    },
    {
      message: 'Either company name or personal name is required',
      path: ['companyName']
    }
  );
```

### 3. **Advanced Validation Patterns**

```typescript
// ‚úÖ Good - Custom validations and transformations
const advancedFormSchema = z.object({
  // Transform and validate
  price: z
    .string()
    .transform((val) => parseFloat(val))
    .pipe(z.number().positive('Price must be positive')),

  // File validation
  avatar: z
    .instanceof(File)
    .refine((file) => file.size <= 5 * 1024 * 1024, 'File size must be less than 5MB')
    .refine(
      (file) => ['image/jpeg', 'image/png', 'image/webp'].includes(file.type),
      'Only JPEG, PNG, and WebP files are allowed'
    ),

  // Array validation
  tags: z
    .array(z.string().min(1, 'Tag cannot be empty'))
    .min(1, 'At least one tag is required')
    .max(5, 'Maximum 5 tags allowed'),

  // Date validation
  birthDate: z
    .date()
    .max(new Date(), 'Birth date cannot be in the future')
    .refine((date) => {
      const age = new Date().getFullYear() - date.getFullYear();
      return age >= 18;
    }, 'Must be at least 18 years old')
});
```

## üèóÔ∏è Form Component Architecture

### 1. **Basic Form Setup with TypeScript**

```typescript
// ‚úÖ Good - Complete form implementation
'use client';

import { zodResolver } from '@hookform/resolvers/zod';
import { useForm } from 'react-hook-form';
import { z } from 'zod';

import { Button } from '@/components/ui/button';
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage
} from '@/components/ui/form';
import { Input } from '@/components/ui/input';

const formSchema = z.object({
  email: z.string().email('Invalid email address'),
  password: z.string().min(8, 'Password must be at least 8 characters')
});

type FormData = z.infer<typeof formSchema>;

type SignInFormProps = {
  onSubmit: (data: FormData) => Promise<void>;
  isLoading?: boolean;
};

const SignInForm = ({ onSubmit, isLoading = false }: SignInFormProps) => {
  const form = useForm<FormData>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      email: '',
      password: ''
    },
    mode: 'onBlur' // Validate on blur for better UX
  });

  const handleSubmit = async (data: FormData) => {
    try {
      await onSubmit(data);
      form.reset(); // Reset form on successful submission
    } catch (error) {
      // Handle error appropriately
      console.error('Form submission error:', error);
    }
  };

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(handleSubmit)} className="space-y-6">
        <FormField
          control={form.control}
          name="email"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Email</FormLabel>
              <FormControl>
                <Input
                  type="email"
                  placeholder="Enter your email"
                  autoComplete="email"
                  {...field}
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />

        <FormField
          control={form.control}
          name="password"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Password</FormLabel>
              <FormControl>
                <Input
                  type="password"
                  placeholder="Enter your password"
                  autoComplete="current-password"
                  {...field}
                />
              </FormControl>
              <FormDescription>
                Password must be at least 8 characters long
              </FormDescription>
              <FormMessage />
            </FormItem>
          )}
        />

        <Button
          type="submit"
          disabled={isLoading || !form.formState.isValid}
          className="w-full"
        >
          {isLoading ? 'Signing in...' : 'Sign In'}
        </Button>
      </form>
    </Form>
  );
};

export default SignInForm;
```

### 2. **Advanced Form Patterns**

```typescript
// ‚úÖ Good - Complex form with dynamic fields and validation
'use client';

import { useFieldArray, useForm, useWatch } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';

const dynamicFormSchema = z.object({
  user: z.object({
    name: z.string().min(1, 'Name is required'),
    email: z.string().email('Invalid email')
  }),
  preferences: z.object({
    newsletter: z.boolean(),
    notifications: z.boolean(),
    theme: z.enum(['light', 'dark', 'system'])
  }),
  addresses: z.array(
    z.object({
      street: z.string().min(1, 'Street is required'),
      city: z.string().min(1, 'City is required'),
      postalCode: z.string().min(1, 'Postal code is required'),
      isPrimary: z.boolean()
    })
  ).min(1, 'At least one address is required')
});

type DynamicFormData = z.infer<typeof dynamicFormSchema>;

const DynamicForm = () => {
  const form = useForm<DynamicFormData>({
    resolver: zodResolver(dynamicFormSchema),
    defaultValues: {
      user: { name: '', email: '' },
      preferences: { newsletter: false, notifications: true, theme: 'system' },
      addresses: [{ street: '', city: '', postalCode: '', isPrimary: true }]
    }
  });

  const { fields, append, remove } = useFieldArray({
    control: form.control,
    name: 'addresses'
  });

  // Watch for changes to conditionally show fields
  const watchedNewsletter = useWatch({
    control: form.control,
    name: 'preferences.newsletter'
  });

  const onSubmit = (data: DynamicFormData) => {
    // Ensure only one primary address
    const primaryAddresses = data.addresses.filter(addr => addr.isPrimary);
    if (primaryAddresses.length !== 1) {
      form.setError('addresses', {
        message: 'Exactly one address must be marked as primary'
      });
      return;
    }
    console.log('Form data:', data);
  };

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
        {/* User Information */}
        <div className="space-y-4">
          <h3 className="text-lg font-medium">User Information</h3>

          <FormField
            control={form.control}
            name="user.name"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Full Name</FormLabel>
                <FormControl>
                  <Input placeholder="John Doe" {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />

          <FormField
            control={form.control}
            name="user.email"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Email</FormLabel>
                <FormControl>
                  <Input type="email" placeholder="john@example.com" {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
        </div>

        {/* Preferences */}
        <div className="space-y-4">
          <h3 className="text-lg font-medium">Preferences</h3>

          <FormField
            control={form.control}
            name="preferences.newsletter"
            render={({ field }) => (
              <FormItem className="flex flex-row items-start space-x-3 space-y-0">
                <FormControl>
                  <Checkbox
                    checked={field.value}
                    onCheckedChange={field.onChange}
                  />
                </FormControl>
                <div className="space-y-1 leading-none">
                  <FormLabel>Subscribe to newsletter</FormLabel>
                  <FormDescription>
                    Receive updates about new features and promotions
                  </FormDescription>
                </div>
              </FormItem>
            )}
          />

          {/* Conditional field based on newsletter subscription */}
          {watchedNewsletter && (
            <FormField
              control={form.control}
              name="preferences.notifications"
              render={({ field }) => (
                <FormItem className="flex flex-row items-start space-x-3 space-y-0">
                  <FormControl>
                    <Checkbox
                      checked={field.value}
                      onCheckedChange={field.onChange}
                    />
                  </FormControl>
                  <div className="space-y-1 leading-none">
                    <FormLabel>Email notifications</FormLabel>
                    <FormDescription>
                      Receive instant notifications via email
                    </FormDescription>
                  </div>
                </FormItem>
              )}
            />
          )}
        </div>

        {/* Dynamic Addresses */}
        <div className="space-y-4">
          <div className="flex items-center justify-between">
            <h3 className="text-lg font-medium">Addresses</h3>
            <Button
              type="button"
              variant="outline"
              onClick={() => append({ street: '', city: '', postalCode: '', isPrimary: false })}
            >
              Add Address
            </Button>
          </div>

          {fields.map((field, index) => (
            <div key={field.id} className="border rounded-lg p-4 space-y-4">
              <div className="flex items-center justify-between">
                <h4 className="font-medium">Address {index + 1}</h4>
                {fields.length > 1 && (
                  <Button
                    type="button"
                    variant="destructive"
                    size="sm"
                    onClick={() => remove(index)}
                  >
                    Remove
                  </Button>
                )}
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <FormField
                  control={form.control}
                  name={`addresses.${index}.street`}
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Street Address</FormLabel>
                      <FormControl>
                        <Input placeholder="123 Main St" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name={`addresses.${index}.city`}
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>City</FormLabel>
                      <FormControl>
                        <Input placeholder="New York" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name={`addresses.${index}.postalCode`}
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Postal Code</FormLabel>
                      <FormControl>
                        <Input placeholder="10001" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name={`addresses.${index}.isPrimary`}
                  render={({ field }) => (
                    <FormItem className="flex flex-row items-start space-x-3 space-y-0 pt-6">
                      <FormControl>
                        <Checkbox
                          checked={field.value}
                          onCheckedChange={field.onChange}
                        />
                      </FormControl>
                      <div className="space-y-1 leading-none">
                        <FormLabel>Primary Address</FormLabel>
                      </div>
                    </FormItem>
                  )}
                />
              </div>
            </div>
          ))}
        </div>

        <Button type="submit" className="w-full">
          Save Information
        </Button>
      </form>
    </Form>
  );
};
```

## üîß Integration with Server Actions

### 1. **Server Action with Zod Validation**

```typescript
// ‚úÖ Good - Server Action with validation
'use server';

import { redirect } from 'next/navigation';

import { z } from 'zod';

// ‚úÖ Good - Server Action with validation

const signUpSchema = z.object({
  name: z.string().min(2, 'Name must be at least 2 characters'),
  email: z.string().email('Invalid email address'),
  password: z.string().min(8, 'Password must be at least 8 characters')
});

type SignUpResponse = {
  success: boolean;
  message: string;
  fieldErrors?: Record<string, string[]>;
};

export const signUpAction = async (formData: FormData): Promise<SignUpResponse> => {
  // Extract form data
  const rawData = {
    name: formData.get('name'),
    email: formData.get('email'),
    password: formData.get('password')
  };

  // Validate with Zod
  const result = signUpSchema.safeParse(rawData);

  if (!result.success) {
    return {
      success: false,
      message: 'Validation failed',
      fieldErrors: result.error.flatten().fieldErrors
    };
  }

  // Process validated data
  try {
    const { name, email, password } = result.data;

    // Your business logic here
    await createUser({ name, email, password });

    return {
      success: true,
      message: 'Account created successfully'
    };
  } catch (error) {
    return {
      success: false,
      message: 'Failed to create account'
    };
  }
};

// Using with React Hook Form
const SignUpForm = () => {
  const form = useForm<z.infer<typeof signUpSchema>>({
    resolver: zodResolver(signUpSchema)
  });

  const onSubmit = async (data: z.infer<typeof signUpSchema>) => {
    const formData = new FormData();
    Object.entries(data).forEach(([key, value]) => {
      formData.append(key, value);
    });

    const result = await signUpAction(formData);

    if (!result.success) {
      if (result.fieldErrors) {
        Object.entries(result.fieldErrors).forEach(([field, errors]) => {
          form.setError(field as keyof typeof data, {
            message: errors[0]
          });
        });
      }
      toast.error(result.message);
    } else {
      toast.success(result.message);
      redirect('/dashboard');
    }
  };

  // Form JSX...
};
```

### 2. **React Query Integration**

```typescript
// ‚úÖ Good - Form with React Query mutations
'use client';

import { useMutation, useQueryClient } from '@tanstack/react-query';
import { toast } from 'sonner';

const useCreateUser = () => {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: async (userData: z.infer<typeof userSchema>) => {
      const response = await fetch('/api/users', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(userData)
      });

      if (!response.ok) {
        throw new Error('Failed to create user');
      }

      return response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['users'] });
      toast.success('User created successfully');
    },
    onError: (error) => {
      toast.error('Failed to create user');
    },
    meta: {
      successMessage: 'User created successfully',
      errorMessage: 'Failed to create user'
    }
  });
};

const CreateUserForm = () => {
  const form = useForm<z.infer<typeof userSchema>>({
    resolver: zodResolver(userSchema)
  });

  const createUserMutation = useCreateUser();

  const onSubmit = (data: z.infer<typeof userSchema>) => {
    createUserMutation.mutate(data, {
      onSuccess: () => {
        form.reset();
      }
    });
  };

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)}>
        {/* Form fields */}
        <Button
          type="submit"
          disabled={createUserMutation.isPending}
        >
          {createUserMutation.isPending ? 'Creating...' : 'Create User'}
        </Button>
      </form>
    </Form>
  );
};
```

## üé® Custom Form Components

### 1. **Reusable Form Field Components**

```typescript
// ‚úÖ Good - Reusable form components with proper typing
import type { ComponentProps } from 'react';
import type { ControllerRenderProps, FieldPath, FieldValues } from 'react-hook-form';

// Generic FormField wrapper
type FormFieldWrapperProps<
  TFieldValues extends FieldValues,
  TName extends FieldPath<TFieldValues>
> = {
  name: TName;
  label: string;
  description?: string;
  required?: boolean;
  render: (field: ControllerRenderProps<TFieldValues, TName>) => React.ReactNode;
};

const FormFieldWrapper = <
  TFieldValues extends FieldValues,
  TName extends FieldPath<TFieldValues>
>({
  name,
  label,
  description,
  required,
  render
}: FormFieldWrapperProps<TFieldValues, TName>) => {
  return (
    <FormField
      name={name}
      render={({ field }) => (
        <FormItem>
          <FormLabel>
            {label}
            {required && <span className="text-destructive ml-1">*</span>}
          </FormLabel>
          <FormControl>{render(field)}</FormControl>
          {description && <FormDescription>{description}</FormDescription>}
          <FormMessage />
        </FormItem>
      )}
    />
  );
};

// Specialized input components
type TextFieldProps<
  TFieldValues extends FieldValues,
  TName extends FieldPath<TFieldValues>
> = {
  name: TName;
  label: string;
  description?: string;
  required?: boolean;
  placeholder?: string;
  type?: 'text' | 'email' | 'password' | 'tel' | 'url';
} & Omit<ComponentProps<typeof Input>, 'name' | 'type'>;

const TextField = <
  TFieldValues extends FieldValues,
  TName extends FieldPath<TFieldValues>
>({
  name,
  label,
  description,
  required,
  placeholder,
  type = 'text',
  ...inputProps
}: TextFieldProps<TFieldValues, TName>) => {
  return (
    <FormFieldWrapper
      name={name}
      label={label}
      description={description}
      required={required}
      render={(field) => (
        <Input
          type={type}
          placeholder={placeholder}
          {...field}
          {...inputProps}
        />
      )}
    />
  );
};

// Select field component
type SelectOption = {
  value: string;
  label: string;
  disabled?: boolean;
};

type SelectFieldProps<
  TFieldValues extends FieldValues,
  TName extends FieldPath<TFieldValues>
> = {
  name: TName;
  label: string;
  description?: string;
  required?: boolean;
  placeholder?: string;
  options: SelectOption[];
};

const SelectField = <
  TFieldValues extends FieldValues,
  TName extends FieldPath<TFieldValues>
>({
  name,
  label,
  description,
  required,
  placeholder,
  options
}: SelectFieldProps<TFieldValues, TName>) => {
  return (
    <FormFieldWrapper
      name={name}
      label={label}
      description={description}
      required={required}
      render={(field) => (
        <Select onValueChange={field.onChange} defaultValue={field.value}>
          <SelectTrigger>
            <SelectValue placeholder={placeholder} />
          </SelectTrigger>
          <SelectContent>
            {options.map((option) => (
              <SelectItem
                key={option.value}
                value={option.value}
                disabled={option.disabled}
              >
                {option.label}
              </SelectItem>
            ))}
          </SelectContent>
        </Select>
      )}
    />
  );
};

// Usage in forms
const UserForm = () => {
  const form = useForm<UserFormData>({
    resolver: zodResolver(userSchema)
  });

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
        <TextField
          name="name"
          label="Full Name"
          placeholder="Enter your full name"
          required
        />

        <TextField
          name="email"
          label="Email Address"
          type="email"
          placeholder="Enter your email"
          required
        />

        <SelectField
          name="role"
          label="Role"
          placeholder="Select a role"
          options={[
            { value: 'user', label: 'User' },
            { value: 'admin', label: 'Administrator' },
            { value: 'moderator', label: 'Moderator' }
          ]}
          required
        />

        <Button type="submit">Submit</Button>
      </form>
    </Form>
  );
};
```

## üîç Error Handling & Validation

### 1. **Advanced Error Handling**

```typescript
// ‚úÖ Good - Comprehensive error handling
'use client';

import { useEffect } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';

const FormWithErrorHandling = () => {
  const form = useForm<FormData>({
    resolver: zodResolver(formSchema),
    mode: 'onBlur', // Validate on blur for better UX
    reValidateMode: 'onChange' // Revalidate on change after first error
  });

  const {
    formState: { errors, isSubmitting, isValid, dirtyFields },
    setError,
    clearErrors,
    trigger
  } = form;

  // Custom validation
  const validateCustomField = async (value: string) => {
    try {
      const response = await fetch(`/api/validate-username?username=${value}`);
      const result = await response.json();

      if (!result.available) {
        setError('username', {
          type: 'custom',
          message: 'Username is already taken'
        });
        return false;
      }

      clearErrors('username');
      return true;
    } catch (error) {
      setError('username', {
        type: 'custom',
        message: 'Failed to validate username'
      });
      return false;
    }
  };

  // Handle server errors
  const handleServerErrors = (serverErrors: Record<string, string[]>) => {
    Object.entries(serverErrors).forEach(([field, messages]) => {
      setError(field as keyof FormData, {
        type: 'server',
        message: messages[0]
      });
    });
  };

  // Global form error for non-field errors
  const [globalError, setGlobalError] = useState<string | null>(null);

  const onSubmit = async (data: FormData) => {
    setGlobalError(null);

    try {
      const result = await submitForm(data);

      if (!result.success) {
        if (result.fieldErrors) {
          handleServerErrors(result.fieldErrors);
        } else {
          setGlobalError(result.message);
        }
      }
    } catch (error) {
      setGlobalError('An unexpected error occurred. Please try again.');
    }
  };

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
        {globalError && (
          <Alert variant="destructive">
            <AlertDescription>{globalError}</AlertDescription>
          </Alert>
        )}

        <FormField
          control={form.control}
          name="username"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Username</FormLabel>
              <FormControl>
                <Input
                  {...field}
                  onBlur={async (e) => {
                    field.onBlur();
                    if (e.target.value) {
                      await validateCustomField(e.target.value);
                    }
                  }}
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />

        {/* Error summary for accessibility */}
        {Object.keys(errors).length > 0 && (
          <Alert variant="destructive">
            <AlertDescription>
              <div className="space-y-1">
                <p className="font-medium">Please fix the following errors:</p>
                <ul className="list-disc pl-4 space-y-1">
                  {Object.entries(errors).map(([field, error]) => (
                    <li key={field}>
                      <button
                        type="button"
                        className="text-left underline"
                        onClick={() => {
                          const element = document.getElementById(field);
                          element?.focus();
                        }}
                      >
                        {error.message}
                      </button>
                    </li>
                  ))}
                </ul>
              </div>
            </AlertDescription>
          </Alert>
        )}

        <Button
          type="submit"
          disabled={isSubmitting || !isValid}
          className="w-full"
        >
          {isSubmitting ? 'Submitting...' : 'Submit'}
        </Button>
      </form>
    </Form>
  );
};
```

## üé≠ Form State Management

### 1. **Optimistic Updates with React Query**

```typescript
// ‚úÖ Good - Optimistic updates pattern
const useOptimisticUserUpdate = () => {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: updateUser,
    onMutate: async (newUser) => {
      // Cancel outgoing refetches
      await queryClient.cancelQueries({ queryKey: ['user', newUser.id] });

      // Snapshot previous value
      const previousUser = queryClient.getQueryData(['user', newUser.id]);

      // Optimistically update
      queryClient.setQueryData(['user', newUser.id], newUser);

      return { previousUser };
    },
    onError: (err, newUser, context) => {
      // Rollback on error
      queryClient.setQueryData(['user', newUser.id], context?.previousUser);
    },
    onSettled: (data, error, variables) => {
      // Always refetch after error or success
      queryClient.invalidateQueries({ queryKey: ['user', variables.id] });
    }
  });
};

const UserEditForm = ({ user }: { user: User }) => {
  const form = useForm<UserFormData>({
    resolver: zodResolver(userSchema),
    defaultValues: user
  });

  const updateMutation = useOptimisticUserUpdate();

  const onSubmit = (data: UserFormData) => {
    updateMutation.mutate({ ...user, ...data });
  };

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)}>
        {/* Form fields */}
        <div className="flex gap-2">
          <Button
            type="button"
            variant="outline"
            onClick={() => form.reset()}
            disabled={!form.formState.isDirty}
          >
            Reset
          </Button>
          <Button
            type="submit"
            disabled={updateMutation.isPending || !form.formState.isDirty}
          >
            {updateMutation.isPending ? 'Saving...' : 'Save Changes'}
          </Button>
        </div>
      </form>
    </Form>
  );
};
```

## üß™ Testing Forms

### 1. **Unit Testing Forms**

```typescript
// ‚úÖ Good - Form testing patterns
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import { z } from 'zod';

// Mock schema for testing
const testSchema = z.object({
  email: z.string().email('Invalid email'),
  name: z.string().min(2, 'Name must be at least 2 characters')
});

describe('UserForm', () => {
  const mockOnSubmit = vi.fn();

  beforeEach(() => {
    mockOnSubmit.mockClear();
  });

  it('validates email field correctly', async () => {
    render(<UserForm onSubmit={mockOnSubmit} />);

    const emailInput = screen.getByLabelText(/email/i);

    // Test invalid email
    await userEvent.type(emailInput, 'invalid-email');
    await userEvent.tab(); // Trigger blur

    await waitFor(() => {
      expect(screen.getByText('Invalid email')).toBeInTheDocument();
    });

    // Test valid email
    await userEvent.clear(emailInput);
    await userEvent.type(emailInput, 'test@example.com');
    await userEvent.tab();

    await waitFor(() => {
      expect(screen.queryByText('Invalid email')).not.toBeInTheDocument();
    });
  });

  it('submits form with valid data', async () => {
    render(<UserForm onSubmit={mockOnSubmit} />);

    await userEvent.type(screen.getByLabelText(/name/i), 'John Doe');
    await userEvent.type(screen.getByLabelText(/email/i), 'john@example.com');

    await userEvent.click(screen.getByRole('button', { name: /submit/i }));

    await waitFor(() => {
      expect(mockOnSubmit).toHaveBeenCalledWith({
        name: 'John Doe',
        email: 'john@example.com'
      });
    });
  });

  it('displays field errors correctly', async () => {
    render(<UserForm onSubmit={mockOnSubmit} />);

    // Submit empty form
    await userEvent.click(screen.getByRole('button', { name: /submit/i }));

    await waitFor(() => {
      expect(screen.getByText('Name must be at least 2 characters')).toBeInTheDocument();
      expect(screen.getByText('Invalid email')).toBeInTheDocument();
    });
  });
});
```

## üìã Best Practices Summary

### 1. **Performance Optimization**

- Use `mode: 'onBlur'` for better UX
- Implement debounced validation for async checks
- Use `useWatch` sparingly and with specific field names
- Leverage `formState.dirtyFields` for conditional rendering

### 2. **Accessibility Guidelines**

- Always provide proper `FormLabel` components
- Use `FormDescription` for additional context
- Implement error summaries for screen readers
- Ensure proper focus management

### 3. **Type Safety Rules**

- Always infer types from Zod schemas
- Use generic components for reusability
- Define explicit prop types for form components
- Leverage TypeScript's utility types

### 4. **Error Handling Standards**

- Provide clear, actionable error messages
- Implement both client and server-side validation
- Use global error states for non-field errors
- Handle loading states appropriately

### 5. **Code Organization**

- Separate schemas into dedicated files
- Create reusable form components
- Use consistent naming conventions
- Implement proper error boundaries

This comprehensive guide ensures type-safe, performant, and accessible forms using React
Hook Form and Zod in your Next.js application. alwaysApply: false

---
